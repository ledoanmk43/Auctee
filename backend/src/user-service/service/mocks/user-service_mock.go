// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/user-service/service/user-service.go

// Package service is a generated GoMock package.
package service

import (
	dto "chilindo/src/user-service/dto"
	entity "chilindo/src/user-service/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIUserService) CreateUser(user *entity.User) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserServiceMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserService)(nil).CreateUser), user)
}

// FindByEmail mocks base method.
func (m *MockIUserService) FindByEmail(email string) *entity.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", email)
	ret0, _ := ret[0].(*entity.User)
	return ret0
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockIUserServiceMockRecorder) FindByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockIUserService)(nil).FindByEmail), email)
}

// IsDuplicateEmail mocks base method.
func (m *MockIUserService) IsDuplicateEmail(email string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDuplicateEmail", email)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDuplicateEmail indicates an expected call of IsDuplicateEmail.
func (mr *MockIUserServiceMockRecorder) IsDuplicateEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDuplicateEmail", reflect.TypeOf((*MockIUserService)(nil).IsDuplicateEmail), email)
}

// Update mocks base method.
func (m *MockIUserService) Update(user *dto.UserUpdateDTO) *entity.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(*entity.User)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIUserServiceMockRecorder) Update(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUserService)(nil).Update), user)
}

// VerifyCredential mocks base method.
func (m *MockIUserService) VerifyCredential(loginDTO *dto.UserLoginDTO) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyCredential", loginDTO)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyCredential indicates an expected call of VerifyCredential.
func (mr *MockIUserServiceMockRecorder) VerifyCredential(loginDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyCredential", reflect.TypeOf((*MockIUserService)(nil).VerifyCredential), loginDTO)
}
