// Code generated by MockGen. DO NOT EDIT.
// Source: ./src/user-service/service/address-service.go

// Package service is a generated GoMock package.
package service

import (
	dto "chilindo/src/user-service/dto"
	entity "chilindo/src/user-service/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIAddressService is a mock of IAddressService interface.
type MockIAddressService struct {
	ctrl     *gomock.Controller
	recorder *MockIAddressServiceMockRecorder
}

// MockIAddressServiceMockRecorder is the mock recorder for MockIAddressService.
type MockIAddressServiceMockRecorder struct {
	mock *MockIAddressService
}

// NewMockIAddressService creates a new mock instance.
func NewMockIAddressService(ctrl *gomock.Controller) *MockIAddressService {
	mock := &MockIAddressService{ctrl: ctrl}
	mock.recorder = &MockIAddressServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAddressService) EXPECT() *MockIAddressServiceMockRecorder {
	return m.recorder
}

// CreateAddress mocks base method.
func (m *MockIAddressService) CreateAddress(address *entity.Address) (*entity.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAddress", address)
	ret0, _ := ret[0].(*entity.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAddress indicates an expected call of CreateAddress.
func (mr *MockIAddressServiceMockRecorder) CreateAddress(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAddress", reflect.TypeOf((*MockIAddressService)(nil).CreateAddress), address)
}

// DeleteAddress mocks base method.
func (m *MockIAddressService) DeleteAddress(dto *dto.GetAddressByIdDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddress", dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddress indicates an expected call of DeleteAddress.
func (mr *MockIAddressServiceMockRecorder) DeleteAddress(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddress", reflect.TypeOf((*MockIAddressService)(nil).DeleteAddress), dto)
}

// GetAddress mocks base method.
func (m *MockIAddressService) GetAddress(dto *dto.GetAddressDTO) (*[]entity.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress", dto)
	ret0, _ := ret[0].(*[]entity.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockIAddressServiceMockRecorder) GetAddress(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockIAddressService)(nil).GetAddress), dto)
}

// GetAddressById mocks base method.
func (m *MockIAddressService) GetAddressById(dto *dto.GetAddressByIdDTO) (*entity.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddressById", dto)
	ret0, _ := ret[0].(*entity.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAddressById indicates an expected call of GetAddressById.
func (mr *MockIAddressServiceMockRecorder) GetAddressById(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddressById", reflect.TypeOf((*MockIAddressService)(nil).GetAddressById), dto)
}

// UpdateAddress mocks base method.
func (m *MockIAddressService) UpdateAddress(address *entity.Address) (*entity.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", address)
	ret0, _ := ret[0].(*entity.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockIAddressServiceMockRecorder) UpdateAddress(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockIAddressService)(nil).UpdateAddress), address)
}
